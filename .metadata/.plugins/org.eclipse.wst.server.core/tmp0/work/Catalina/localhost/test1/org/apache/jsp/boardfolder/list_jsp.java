/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.41
 * Generated at: 2019-06-22 18:30:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.boardfolder;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import libbean.BoardDBBean;
import libbean.BoardDataBean;
import java.util.List;
import java.text.SimpleDateFormat;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    int pageSize = 10;
    SimpleDateFormat sdf = 
        new SimpleDateFormat("yyyy-MM-dd HH:mm");

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("libbean.BoardDataBean");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("libbean.BoardDBBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    String pageNum = request.getParameter("pageNum");

    if (pageNum == null) {
        pageNum = "1";
    }

    int currentPage = Integer.parseInt(pageNum);
    int startRow = (currentPage - 1) * pageSize + 1;     //--현 페이지 글목록에 표시할 시작 글번호 설정 (시작 글번호)
    int endRow = currentPage * pageSize;       //--현 페이지 글목록에 표시할 마지막 글번호를 설정하는 부분(마지막 글번호)
    int count = 0; 
    int number = 0;
    List<BoardDataBean> articleList = null; 
    
    BoardDBBean dbPro = BoardDBBean.getInstance();
    count = dbPro.getArticleCount();       //--------전체 레코드 수 얻어오는 부분
    
    
    if (count > 0) {
        articleList = dbPro.getArticles(startRow, pageSize);
    }

	number = count-(currentPage-1)*pageSize;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link href=\"../sourceboot/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<title>QnA</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n");
      out.write("   <a class=\"navbar-brand\" href=\"../shop/shopMain.jsp\">캠핑</a>\r\n");
      out.write("  <button class=\"navbar-toggler collapsed\" aria-expanded=\"false\" aria-controls=\"navbarColor01\" aria-label=\"Toggle navigation\" type=\"button\" data-target=\"#navbarColor01\" data-toggle=\"collapse\">\r\n");
      out.write("    <span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("  </button>\r\n");
      out.write("\r\n");
      out.write("  <div class=\"collapse navbar-collapse\" id=\"navbarColor01\">\r\n");
      out.write("    <ul class=\"navbar-nav mr-auto\">\r\n");
      out.write("      <li class=\"nav-item active\">\r\n");
      out.write("        <a class=\"nav-link\" href=\"../manager/logon/managerLoginForm.jsp\"> 관리자<span class=\"sr-only\">(current)</span></a>\r\n");
      out.write("      </li>\r\n");
      out.write("      <li class=\"nav-item\">\r\n");
      out.write("         <a class=\"nav-link\" href=\"../shop/searchorder.jsp\">주문조회</a>\r\n");
      out.write("      </li>\r\n");
      out.write("      <li class=\"nav-item\">\r\n");
      out.write("       <a class=\"nav-link\" href=\"list.jsp\">Q&A 문의</a>\r\n");
      out.write("      </li>\r\n");
      out.write("    </ul>    \r\n");
      out.write("  </div>\r\n");
      out.write("</nav>\r\n");
      out.write("<br>\r\n");
      out.write("<p>&nbsp;&nbsp;★  QnA : ");
      out.print(count);
      out.write(" ☆</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 if (count == 0) { 
      out.write("                               ");
 //게시판이  글이 없으면(레코드가 없으면)!!   뜨우는 부분 
      out.write("\r\n");
      out.write("\r\n");
      out.write("<table class=\"table table-hover\">\r\n");
      out.write("<tr>\r\n");
      out.write("    <td align=\"center\">\r\n");
      out.write("            ●●○◑♣     0개     ◐☆★♣▥ ........... \r\n");
      out.write("    </td>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
 } else {
      out.write("\r\n");
      out.write("\r\n");
      out.write("<table class=\"table table-hover table-responsive\"> \r\n");
      out.write("\t<thead>\r\n");
      out.write("\t    <tr class=\"table-warning\" height=\"30\">               ");
 //게시판이  글이 있으면(레코드가 있으면)!!   뜨우는 부분 
      out.write("\r\n");
      out.write("\t      <td scope=\"col\" align=\"center\"  width=\"50\"  >No</td> \r\n");
      out.write("\t      <td scope=\"col\" align=\"center\"  width=\"250\" >제목</td> \r\n");
      out.write("\t      <td scope=\"col\" align=\"center\"  width=\"100\" >작성자</td>\r\n");
      out.write("\t      <td scope=\"col\" align=\"center\"  width=\"150\" >날짜</td> \r\n");
      out.write("\t      <td scope=\"col\" align=\"center\"  width=\"50\" >조 회</td>       \r\n");
      out.write("\t    </tr>\r\n");
      out.write("\t</thead>\r\n");
  
   for (int i = 0 ; i < articleList.size() ; i++) {
       BoardDataBean article = articleList.get(i);

      out.write("\r\n");
      out.write("   <tr height=\"30\">\r\n");
      out.write("    <td  width=\"50\" align=\"center\"> ");
      out.print(number--);
      out.write("</td>\r\n");
      out.write("    <td  width=\"250\" align=\"left\">\r\n");

	int wid=0; 
	if(article.getRe_level()>0){
	   wid=5*(article.getRe_level());

      out.write("\r\n");
      out.write("\t  <img src=\"\" width=\"");
      out.print(wid);
      out.write("\" height=\"16\">\r\n");
      out.write("\t  <img src=\"../photofile/re.png\">\r\n");
  }else{
      out.write("\r\n");
      out.write("\t  <img src=\"images/level.png\" width=\"");
      out.print(wid);
      out.write("\" height=\"16\">\r\n");
  }
      out.write("\r\n");
      out.write("           \r\n");
      out.write("      <a href=\"content.jsp?num=");
      out.print(article.getNum());
      out.write("&pageNum=");
      out.print(currentPage);
      out.write("\">                ");
//----------content.jsp로 이동해서 글내용을 볼 수 있게 한다 
      out.write("\r\n");
      out.write("           ");
      out.print(article.getSubject());
      out.write("</a> \r\n");
 if(article.getReadcount()>=20){
      out.write("\r\n");
      out.write("         <img src=\"images/hot.gif\" border=\"0\"  height=\"16\">");
}
      out.write(" </td>\r\n");
      out.write("    <td width=\"100\" align=\"center\"> \r\n");
      out.write("       <a href=\"mailto:");
      out.print(article.getEmail());
      out.write("\">\r\n");
      out.write("                     ");
      out.print(article.getWriter());
      out.write("</a></td>\r\n");
      out.write("    <td width=\"150\"  align=\"center\">");
      out.print( sdf.format(article.getReg_date()));
      out.write("</td>\r\n");
      out.write("    <td width=\"50\" align=\"center\">");
      out.print(article.getReadcount());
      out.write("</td>\r\n");
      out.write("   \r\n");
      out.write("  </tr>\r\n");
}
      out.write("\r\n");
      out.write("</table>\r\n");
}
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" <div>\r\n");
      out.write("  <ul class=\"pagination\">\r\n");
                                          //------------------페이지 이동하는 부분
    if (count > 0) {
        int pageCount = count / pageSize + (count % pageSize == 0 ? 0 : 1);
		int startPage =1;
		
		if(currentPage % 5 != 0)
           startPage = (int)(currentPage/5)*5 + 1;
		else
           startPage = ((int)(currentPage/5)-1)*5 + 1;

		int pageBlock = 5;
        int endPage = startPage + pageBlock - 1;
        if (endPage > pageCount) endPage = pageCount;
        
        if (startPage > 5) { 
      out.write("\r\n");
      out.write("        \r\n");
      out.write("\r\n");
      out.write("  \t\t <li class=\"page-item\">\r\n");
      out.write("          <a class=\"page-link\" href=\"list.jsp?pageNum=");
      out.print( startPage - 5 );
      out.write("\">&laquo;</a>\r\n");
      out.write("         </li>\r\n");
      }
        
        for (int i = startPage ; i <= endPage ; i++) {  
      out.write("\r\n");
      out.write("        <li class=\"page-item\">\r\n");
      out.write("           <a class=\"page-link\" href=\"list.jsp?pageNum=");
      out.print( i );
      out.write('"');
      out.write('>');
      out.print( i );
      out.write("</a>\r\n");
      out.write("        </li>\r\n");
      }
        
        if (endPage < pageCount) {  
      out.write("\r\n");
      out.write("        <li class=\"page-item\">\r\n");
      out.write("         <a class=\"page-link\" href=\"list.jsp?pageNum=");
      out.print( startPage + 5 );
      out.write("\">&raquo;</a>\r\n");
      out.write("        </li>\r\n");
      out.write("\r\n");
      out.write(" \r\n");

        }
    }

      out.write("\r\n");
      out.write("  </ul>\r\n");
      out.write(" </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<br><br><br><Br><br>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t<nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-bottom\">\r\n");
      out.write("\t\t\t  \t<div class=\"text-right\" align=\"right\">\r\n");
      out.write("\t\t\t\t\t  <a href=\"writeForm.jsp\" class=\"btn btn-outline-success\">글작성</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</nav>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
