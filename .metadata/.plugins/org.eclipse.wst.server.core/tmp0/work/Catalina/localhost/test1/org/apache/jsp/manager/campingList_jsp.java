/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.41
 * Generated at: 2019-06-22 18:22:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.manager;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import libbean.ShopCampingitemDBBean;
import libbean.ShopCampingitemDataBean;
import java.util.List;
import java.text.SimpleDateFormat;

public final class campingList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    SimpleDateFormat sdf = 
        new SimpleDateFormat("yyyy-MM-dd HH:mm");

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("libbean.ShopCampingitemDBBean");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("libbean.ShopCampingitemDataBean");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

String managerId ="";
try{
	managerId = (String)session.getAttribute("managerId");
	if(managerId==null || managerId.equals("")){
       response.sendRedirect("../logon/managerLoginForm.jsp");
	}else{

      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    List<ShopCampingitemDataBean> campingList = null; 
    int number =0;
    String campingitem_kind="";
    
    campingitem_kind = request.getParameter("campingitem_kind");
 
    ShopCampingitemDBBean campingProcess = ShopCampingitemDBBean.getInstance();
    int count = campingProcess.getcampingCount();
    
    if (count > 0) {
    	campingList = campingProcess.getcampings(campingitem_kind);
    }

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>등록된 캠핑 물품 목록</title>\r\n");
      out.write("<link href=\"../sourceboot/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\">\r\n");
      out.write("  \t\t<a class=\"navbar-brand\" href=\"#\">상품관리</a>\r\n");
      out.write("    \t\t<div class=\"text-right\" align=\"right\">\r\n");
      out.write("\t\t    \t<form method=\"post\" action=\"managerMain.jsp\"> \r\n");
      out.write("\t\t   \t    \t<input type=\"submit\" value=\"뒤로 가기\" class=\"btn btn-dark\">\t\r\n");
      out.write("\t\t    \t</form>\t\r\n");
      out.write("\t\t    \r\n");
      out.write("\t   \t    </div>\r\n");
      out.write("\t</nav>\r\n");
      out.write("<br><br>\r\n");
      out.write("\t\t\r\n");

   String camping_kindName="";
   if(campingitem_kind.equals("100")){
	   camping_kindName="랜턴 | 버너";
   }else if(campingitem_kind.equals("200")){
	   camping_kindName="캠핑퍼니처";  
   }else if(campingitem_kind.equals("300")){
	   camping_kindName="침낭 | 매트";
   }else if(campingitem_kind.equals("400")){
	   camping_kindName="텐트 | 천막";
   }else if(campingitem_kind.equals("500")){
	   camping_kindName="의류";
   }else if(campingitem_kind.equals("600")){
	   camping_kindName="신발";
   }else if(campingitem_kind.equals("700")){
	   camping_kindName="가방";
   }else if(campingitem_kind.equals("800")){
	   camping_kindName="주변 도구";
   }else if(campingitem_kind.equals("all")){
	   camping_kindName="전체";
   }

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<p>등록된 상품의 ");
      out.print(camping_kindName);
      out.write(" 수 : 총 \r\n");
if(campingitem_kind.equals("all")){
      out.write(" \r\n");
      out.write("    ");
      out.print(count);
      out.write(" 개\r\n");
}else{
      out.write("\r\n");
      out.write("    ");
      out.print(campingList.size() );
      out.write(" 개\r\n");
} 
      out.write("\r\n");
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");

  if (count == 0) {

      out.write("\r\n");
      out.write("<table>\r\n");
      out.write("<tr>\r\n");
      out.write("   <td align=\"center\">\r\n");
      out.write("           등록된 상품이 없습니다.\r\n");
      out.write("   </td>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
} else {
      out.write("\r\n");
      out.write("<table class=\"table table-hover\"> \r\n");
      out.write("    <tr height=\"30\" class=\"table-danger\"> \r\n");
      out.write("      <td align=\"center\"  width=\"20\">No</td> \r\n");
      out.write("      <td align=\"center\"  width=\"20\">종류</td> \r\n");
      out.write("      <td align=\"center\"  width=\"20\">업체명</td>\r\n");
      out.write("      <td align=\"center\"  width=\"130\">제품명</td>\r\n");
      out.write("      <td align=\"center\"  width=\"50\">가격</td> \r\n");
      out.write("      <td align=\"center\"  width=\"70\">수량</td>\r\n");
      out.write("       <td align=\"center\"  width=\"80\">출시년월</td> \r\n");
      out.write("      <td align=\"center\"  width=\"100\">재질</td>\r\n");
      out.write("      <td align=\"center\"  width=\"50\">색상</td>\r\n");
      out.write("       <td align=\"center\"  width=\"50\">사이즈</td>\r\n");
      out.write("      <td align=\"center\"  width=\"40\">무게</td>\r\n");
      out.write("      <td align=\"center\"  width=\"50\">이미지</td>\r\n");
      out.write("      <td align=\"center\"  width=\"30\">할인율</td>\r\n");
      out.write("      <td align=\"center\"  width=\"50\">수정</td>\r\n");
      out.write("      <td align=\"center\"  width=\"50\">삭제</td>         \r\n");
      out.write("    </tr>\r\n");
  
    for (int i = 0 ; i <campingList.size() ; i++) {
      ShopCampingitemDataBean camping = 
    		  (ShopCampingitemDataBean)campingList.get(i);

      out.write("\r\n");
      out.write("   <tr height=\"30\">\r\n");
      out.write("      <td  align=\"center\"  width=\"20\">");
      out.print(++number);
      out.write("</td> \r\n");
      out.write("      <td align=\"center\"  width=\"20\">");
      out.print(camping.getCampingitem_kind());
      out.write("</td> \r\n");
      out.write("      <td align=\"center\"  width=\"20\">");
      out.print(camping.getCampingitem_makername());
      out.write("</td> \r\n");
      out.write("      <td width=\"130\" align=\"left\">\r\n");
      out.write("           ");
      out.print(camping.getCampingitem_title());
      out.write("</td>\r\n");
      out.write("      <td width=\"50\" align=\"center\" >");
      out.print(camping.getCampingitem_price());
      out.write("원</td> \r\n");
      out.write("      <td width=\"70\" align=\"center\" >\r\n");
      out.write("\t      ");
 if(camping.getCampingitem_count()==0) {
      out.write("\r\n");
      out.write("\t         <font color=\"red\">");
      out.print("일시품절");
      out.write("</font>\r\n");
      out.write("\t      ");
 }else{ 
      out.write("\r\n");
      out.write("\t         ");
      out.print(camping.getCampingitem_count());
      out.write("\r\n");
      out.write("\t      ");
} 
      out.write("\r\n");
      out.write("      </td> \r\n");
      out.write("      <td width=\"80\" align=\"center\" >");
      out.print(camping.getCampingitem_launched());
      out.write("</td>\r\n");
      out.write("      <td width=\"100\" align=\"center\" >");
      out.print( camping.getCampingitem_material() );
      out.write("</td>\r\n");
      out.write("      <td width=\"100\" align=\"center\" >");
      out.print(camping.getCampingitem_color());
      out.write("</td>\r\n");
      out.write("      <td width=\"100\" align=\"center\" >");
      out.print(camping.getCampingitem_size());
      out.write("</td>\r\n");
      out.write("      <td width=\"40\" align=\"center\" >");
      out.print(camping.getCampingitem_weight());
      out.write("g</td>\r\n");
      out.write("      <td width=\"50\" align=\"center\" >");
      out.print(camping.getCampingitem_image());
      out.write("</td>\r\n");
      out.write("      <td width=\"30\" align=\"center\" >");
      out.print(camping.getCampingitem_discount_rate());
      out.write("%</td>\r\n");
      out.write("      \r\n");
      out.write("    \r\n");
      out.write("      <td width=\"50\" align=\"center\" >\r\n");
      out.write("         \r\n");
      out.write("         <form method=\"post\" action=\"campingUpdateForm.jsp?campingitem_id=");
      out.print(camping.getCampingitem_id());
      out.write("&campingitem_kind=");
      out.print(camping.getCampingitem_kind());
      out.write("\"> \r\n");
      out.write("\t\t       <input type=\"submit\" value=\"수정\" class=\"btn btn-outline-success\">\t\r\n");
      out.write("\t\t    </form>\t\r\n");
      out.write("\t</td>    \r\n");
      out.write("\t\t     \r\n");
      out.write("\t\t    \r\n");
      out.write("      <td width=\"50\" align=\"center\" >\r\n");
      out.write("   \t\t\t<form method=\"post\" action=\"campingDeleteForm.jsp?campingitem_id=");
      out.print(camping.getCampingitem_id());
      out.write("&campingitem_kind=");
      out.print(camping.getCampingitem_kind());
      out.write("\"> \r\n");
      out.write("\t\t       <input type=\"submit\" value=\"삭제\" class=\"btn btn-outline-warning\">\t\r\n");
      out.write("\t\t    </form>\t      \r\n");
      out.write("\r\n");
      out.write("   </td>  \r\n");
      out.write("          \r\n");
      out.write("   </tr>\r\n");
}
      out.write("\r\n");
      out.write("</table>\r\n");
}
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
 
   }
}catch(Exception e){
   e.printStackTrace();
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
